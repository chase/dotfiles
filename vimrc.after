color focuspoint
"set background=light

let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['cpp','c','h'] }

set shiftwidth=4 tabstop=4 softtabstop=4 expandtab textwidth=0

autocmd BufNewFile,BufRead *.cson set filetype=coffee
"autocmd FileType c,cpp,h setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
"autocmd FileType lua setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab

vmap <Enter>   <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)

Arpeggio inoremap jk <Esc>

"Arpeggio nmap <silent> as <Plug>(easymotion-s2)
nmap <Leader>T   <Plug>(easymotion-Tl)
nmap <Leader>t   <Plug>(easymotion-tl)
nmap <Leader>s   <Plug>(easymotion-sl)
nmap <Leader>F   <Plug>(easymotion-Fl)
nmap <Leader>f   <Plug>(easymotion-fl)
omap T   <Plug>(easymotion-Tl)
omap t   <Plug>(easymotion-tl)
omap s   <Plug>(easymotion-sl)
omap F   <Plug>(easymotion-Fl)
omap f   <Plug>(easymotion-fl)
omap W   <Plug>(easymotion-Wl)
omap w   <Plug>(easymotion-wl)
omap b   <Plug>(easymotion-bl)
omap B   <Plug>(easymotion-Bl)

nmap <silent> <Leader>, :VimFilerExplorer<CR>
nnoremap <silent> <Leader>n :VimFilerExplorer<CR>
nmap <silent> <Leader>s :shell<CR>

nmap <silent> <Leader>md :Dispatch! mkdir -p %:p:h<CR>

nmap <CR> :call FoldFocus('vnew')<CR>
nmap <Leader><CR> :setl foldmethod=marker<CR>

" {{{ iPython
function! UpIPython()
python << EOF
if not kc:
    km_from_string()
EOF
    map  <buffer> <silent> <Leader>d <Plug>(IPython-OpenPyDoc)
    map  <buffer> <silent> <C-Return> <Plug>(IPython-RunFile)
    map  <buffer> <silent> <Leader>rf <Plug>(IPython-RunFile)
    map  <buffer> <silent> <Leader>rl  <Plug>(IPython-RunLine)
    imap <buffer> <silent> <C-s>  <C-o><Plug>(IPython-RunLine)
    xmap <buffer> <silent> <C-s>  <Plug>(IPython-RunLines)
endfunction

augroup ipython
    autocmd!
    autocmd FileType python
                \ call system('pgrep -c ipython2') |
                \ if v:shell_error |
                \   call dispatch#start_command(1, 'ipython2 kernel') |
                \ endif |
                \ call UpIPython()
augroup END
" }}}
" Neocomplete Key Mappings! {{{
inoremap <expr><C-g> neocomplete#undo_completion()
" inoremap <expr><C-l> neocomplete#complete_common_string()
inoremap <expr><Space> pumvisible() ? neocomplete#smart_close_popup() . "\<Space>" : "\<Space>"
" <CR>: Close popup, complete, return and save indent
inoremap <silent><expr><CR> pumvisible() ?
    \ neocomplete#close_popup()."\<C-R>=UltiSnips#ExpandSnippetOrJump()\<CR>" : "\<CR>"

" For smart TAB completion {{
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ neocomplete#start_manual_complete()
function! s:check_back_space()
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction
" }}

" {{{ Better split action for Vimfiler
let s:opentopleft = { 'is_selectable' : 1 }
function! s:opentopleft.func(candidates)
  for candidate in a:candidates
    call unite#util#command_with_restore_cursor('topleft split')
    call unite#take_action('open', candidate)
  endfor
endfunction
call unite#custom#action('openable', 'topleft', s:opentopleft)
autocmd FileType vimfiler nnoremap <silent><buffer><expr> S vimfiler#do_action('topleft')
"}}}

" Remove cruft
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" Print mode
command! -nargs=* Hardcopy call DoMyPrint('<args>')
function DoMyPrint(args)
  let colorsave=g:colors_name
  color print_bw
  setl printfont=courier\ 9
  setl printoptions=paper:letter,number:y,top:2pc,left:2pc,right:2pc,bottom:2pc
  exec 'hardcopy '.a:args
  exec 'color '.colorsave
endfunction

" Auto adjust quickfix
au FileType qf call AdjustWindowHeight(3, 5)
function! AdjustWindowHeight(minheight, maxheight)
  exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
endfunction

" Handle terminal resize
autocmd VimResized * :wincmd =

function! s:gomapping()
  nmap <Leader>i <Plug>(go-info)
  nmap <Leader>gd <Plug>(go-doc)
  nmap <Leader>gv <Plug>(go-doc-vertical)
  nmap <Leader>gb <Plug>(go-doc-browser)
endfunction
au FileType go call s:gomapping()
